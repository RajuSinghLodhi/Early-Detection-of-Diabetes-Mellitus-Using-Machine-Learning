{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1c169bff",
   "metadata": {},
   "source": [
    "# Diabetes Prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ee8c6e0",
   "metadata": {},
   "source": [
    "Dataset : http://staff.pubhealth.ku.dk/~tag/Teaching/share/data/Diabetes.html "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "3ac5bcf0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "b27e07c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('DiabetesRegistry.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "fec87a70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(390, 20)"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "8d1eddb2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>chol</th>\n",
       "      <th>stab.glu</th>\n",
       "      <th>hdl</th>\n",
       "      <th>ratio</th>\n",
       "      <th>glyhb</th>\n",
       "      <th>Location</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight 1</th>\n",
       "      <th>Weight 2</th>\n",
       "      <th>frame</th>\n",
       "      <th>bp.1s</th>\n",
       "      <th>bp.1d</th>\n",
       "      <th>bp.2s</th>\n",
       "      <th>bp.2d</th>\n",
       "      <th>waist</th>\n",
       "      <th>hip</th>\n",
       "      <th>time.ppn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>203.0</td>\n",
       "      <td>82</td>\n",
       "      <td>56.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>4.31</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>46</td>\n",
       "      <td>female</td>\n",
       "      <td>62.0</td>\n",
       "      <td>121</td>\n",
       "      <td>119</td>\n",
       "      <td>medium</td>\n",
       "      <td>118.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>720.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>165.0</td>\n",
       "      <td>97</td>\n",
       "      <td>24.0</td>\n",
       "      <td>6.9</td>\n",
       "      <td>4.44</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>29</td>\n",
       "      <td>female</td>\n",
       "      <td>64.0</td>\n",
       "      <td>218</td>\n",
       "      <td>218</td>\n",
       "      <td>large</td>\n",
       "      <td>112.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>46.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>360.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>228.0</td>\n",
       "      <td>92</td>\n",
       "      <td>37.0</td>\n",
       "      <td>6.2</td>\n",
       "      <td>4.64</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>58</td>\n",
       "      <td>female</td>\n",
       "      <td>61.0</td>\n",
       "      <td>256</td>\n",
       "      <td>243</td>\n",
       "      <td>large</td>\n",
       "      <td>190.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>185.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>180.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>78.0</td>\n",
       "      <td>93</td>\n",
       "      <td>12.0</td>\n",
       "      <td>6.5</td>\n",
       "      <td>4.63</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>67</td>\n",
       "      <td>male</td>\n",
       "      <td>67.0</td>\n",
       "      <td>119</td>\n",
       "      <td>121</td>\n",
       "      <td>large</td>\n",
       "      <td>110.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>480.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1005</td>\n",
       "      <td>249.0</td>\n",
       "      <td>90</td>\n",
       "      <td>28.0</td>\n",
       "      <td>8.9</td>\n",
       "      <td>7.72</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>64</td>\n",
       "      <td>male</td>\n",
       "      <td>68.0</td>\n",
       "      <td>183</td>\n",
       "      <td>179</td>\n",
       "      <td>medium</td>\n",
       "      <td>138.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>44.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>300.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     id   chol  stab.glu   hdl  ratio  glyhb    Location  Age  Gender  Height  \\\n",
       "0  1000  203.0        82  56.0    3.6   4.31  Buckingham   46  female    62.0   \n",
       "1  1001  165.0        97  24.0    6.9   4.44  Buckingham   29  female    64.0   \n",
       "2  1002  228.0        92  37.0    6.2   4.64  Buckingham   58  female    61.0   \n",
       "3  1003   78.0        93  12.0    6.5   4.63  Buckingham   67    male    67.0   \n",
       "4  1005  249.0        90  28.0    8.9   7.72  Buckingham   64    male    68.0   \n",
       "\n",
       "   Weight 1  Weight 2   frame  bp.1s  bp.1d  bp.2s  bp.2d  waist   hip  \\\n",
       "0       121       119  medium  118.0   59.0    NaN    NaN   29.0  38.0   \n",
       "1       218       218   large  112.0   68.0    NaN    NaN   46.0  48.0   \n",
       "2       256       243   large  190.0   92.0  185.0   92.0   49.0  57.0   \n",
       "3       119       121   large  110.0   50.0    NaN    NaN   33.0  38.0   \n",
       "4       183       179  medium  138.0   80.0    NaN    NaN   44.0  41.0   \n",
       "\n",
       "   time.ppn  \n",
       "0     720.0  \n",
       "1     360.0  \n",
       "2     180.0  \n",
       "3     480.0  \n",
       "4     300.0  "
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c9fb56e",
   "metadata": {},
   "source": [
    "**Filling missing blood pressure data and averageing the blood pressure values**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "d3d86714",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['bp.2s'].fillna(df['bp.1s'],inplace=True)\n",
    "df['bp.2d'].fillna(df['bp.1d'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "728a25c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "systolicBP = (df['bp.1s']+df['bp.2s'])//2\n",
    "diastolicBP = (df['bp.1d']+df['bp.2d'])//2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3bd7c0f",
   "metadata": {},
   "source": [
    "**Calculating BMI**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "02cbc41f",
   "metadata": {},
   "outputs": [],
   "source": [
    "weight = (df['Weight 1']+df['Weight 2'])/2\n",
    "weightKG = weight *  0.45359237\n",
    "heightMeter = df['Height']*0.0254\n",
    "BMI = weightKG/(heightMeter**2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a2b0c36",
   "metadata": {},
   "source": [
    "**Adding blood pressure and BMI columns to our Data Frame**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "c02f3d7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "BP = pd.concat([systolicBP,diastolicBP,BMI],axis='columns',keys=['systolicBP','diastolicBP','BMI'])\n",
    "df = pd.concat([df,BP],axis='columns')\n",
    "df.drop(['bp.1s','bp.2s','bp.1d','bp.2d','Height','Weight 1','Weight 2'],axis='columns',inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc3da8ec",
   "metadata": {},
   "source": [
    "**Calculating Waist to Hip ratio**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "18605972",
   "metadata": {},
   "outputs": [],
   "source": [
    "W2Hratio = np.array(df['waist'])/np.array(df['hip'])\n",
    "W2Hratio = pd.DataFrame(W2Hratio,columns=['W/H_ratio'])\n",
    "df = pd.concat([df,W2Hratio],axis='columns')\n",
    "df.drop(['waist','hip'],axis = 'columns',inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "3d99a8d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>chol</th>\n",
       "      <th>stab.glu</th>\n",
       "      <th>hdl</th>\n",
       "      <th>ratio</th>\n",
       "      <th>glyhb</th>\n",
       "      <th>Location</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>frame</th>\n",
       "      <th>time.ppn</th>\n",
       "      <th>systolicBP</th>\n",
       "      <th>diastolicBP</th>\n",
       "      <th>BMI</th>\n",
       "      <th>W/H_ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>203.0</td>\n",
       "      <td>82</td>\n",
       "      <td>56.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>4.31</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>46</td>\n",
       "      <td>female</td>\n",
       "      <td>medium</td>\n",
       "      <td>720.0</td>\n",
       "      <td>118.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>21.948062</td>\n",
       "      <td>0.763158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>165.0</td>\n",
       "      <td>97</td>\n",
       "      <td>24.0</td>\n",
       "      <td>6.9</td>\n",
       "      <td>4.44</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>29</td>\n",
       "      <td>female</td>\n",
       "      <td>large</td>\n",
       "      <td>360.0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>37.419231</td>\n",
       "      <td>0.958333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>228.0</td>\n",
       "      <td>92</td>\n",
       "      <td>37.0</td>\n",
       "      <td>6.2</td>\n",
       "      <td>4.64</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>58</td>\n",
       "      <td>female</td>\n",
       "      <td>large</td>\n",
       "      <td>180.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>47.142128</td>\n",
       "      <td>0.859649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>78.0</td>\n",
       "      <td>93</td>\n",
       "      <td>12.0</td>\n",
       "      <td>6.5</td>\n",
       "      <td>4.63</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>67</td>\n",
       "      <td>male</td>\n",
       "      <td>large</td>\n",
       "      <td>480.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>18.794464</td>\n",
       "      <td>0.868421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1005</td>\n",
       "      <td>249.0</td>\n",
       "      <td>90</td>\n",
       "      <td>28.0</td>\n",
       "      <td>8.9</td>\n",
       "      <td>7.72</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>64</td>\n",
       "      <td>male</td>\n",
       "      <td>medium</td>\n",
       "      <td>300.0</td>\n",
       "      <td>138.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>27.520673</td>\n",
       "      <td>1.073171</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     id   chol  stab.glu   hdl  ratio  glyhb    Location  Age  Gender   frame  \\\n",
       "0  1000  203.0        82  56.0    3.6   4.31  Buckingham   46  female  medium   \n",
       "1  1001  165.0        97  24.0    6.9   4.44  Buckingham   29  female   large   \n",
       "2  1002  228.0        92  37.0    6.2   4.64  Buckingham   58  female   large   \n",
       "3  1003   78.0        93  12.0    6.5   4.63  Buckingham   67    male   large   \n",
       "4  1005  249.0        90  28.0    8.9   7.72  Buckingham   64    male  medium   \n",
       "\n",
       "   time.ppn  systolicBP  diastolicBP        BMI  W/H_ratio  \n",
       "0     720.0       118.0         59.0  21.948062   0.763158  \n",
       "1     360.0       112.0         68.0  37.419231   0.958333  \n",
       "2     180.0       187.0         92.0  47.142128   0.859649  \n",
       "3     480.0       110.0         50.0  18.794464   0.868421  \n",
       "4     300.0       138.0         80.0  27.520673   1.073171  "
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d07702f",
   "metadata": {},
   "source": [
    "**Using One Hot encoding for Gender column**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "4e02d337",
   "metadata": {},
   "outputs": [],
   "source": [
    "G = pd.get_dummies(df['Gender'])\n",
    "df = pd.concat([df,G],axis='columns')\n",
    "df.drop(['Gender','male'],axis='columns',inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74b9cc9d",
   "metadata": {},
   "source": [
    "**Label encoding for frame column**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "3d6d8d85",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "le = LabelEncoder()\n",
    "le.fit(df['frame'])\n",
    "df['frame'] = le.transform(df['frame'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3d7a21f",
   "metadata": {},
   "source": [
    "**Removing entries with empty data values**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "72fcb2ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.dropna(axis=0,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "d0b7bac8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(378, 15)"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "ed5c384c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>chol</th>\n",
       "      <th>stab.glu</th>\n",
       "      <th>hdl</th>\n",
       "      <th>ratio</th>\n",
       "      <th>glyhb</th>\n",
       "      <th>Location</th>\n",
       "      <th>Age</th>\n",
       "      <th>frame</th>\n",
       "      <th>time.ppn</th>\n",
       "      <th>systolicBP</th>\n",
       "      <th>diastolicBP</th>\n",
       "      <th>BMI</th>\n",
       "      <th>W/H_ratio</th>\n",
       "      <th>female</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>203.0</td>\n",
       "      <td>82</td>\n",
       "      <td>56.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>4.31</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>46</td>\n",
       "      <td>1</td>\n",
       "      <td>720.0</td>\n",
       "      <td>118.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>21.948062</td>\n",
       "      <td>0.763158</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>165.0</td>\n",
       "      <td>97</td>\n",
       "      <td>24.0</td>\n",
       "      <td>6.9</td>\n",
       "      <td>4.44</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>37.419231</td>\n",
       "      <td>0.958333</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>228.0</td>\n",
       "      <td>92</td>\n",
       "      <td>37.0</td>\n",
       "      <td>6.2</td>\n",
       "      <td>4.64</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>58</td>\n",
       "      <td>0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>47.142128</td>\n",
       "      <td>0.859649</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>78.0</td>\n",
       "      <td>93</td>\n",
       "      <td>12.0</td>\n",
       "      <td>6.5</td>\n",
       "      <td>4.63</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>67</td>\n",
       "      <td>0</td>\n",
       "      <td>480.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>18.794464</td>\n",
       "      <td>0.868421</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1005</td>\n",
       "      <td>249.0</td>\n",
       "      <td>90</td>\n",
       "      <td>28.0</td>\n",
       "      <td>8.9</td>\n",
       "      <td>7.72</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>64</td>\n",
       "      <td>1</td>\n",
       "      <td>300.0</td>\n",
       "      <td>138.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>27.520673</td>\n",
       "      <td>1.073171</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     id   chol  stab.glu   hdl  ratio  glyhb    Location  Age  frame  \\\n",
       "0  1000  203.0        82  56.0    3.6   4.31  Buckingham   46      1   \n",
       "1  1001  165.0        97  24.0    6.9   4.44  Buckingham   29      0   \n",
       "2  1002  228.0        92  37.0    6.2   4.64  Buckingham   58      0   \n",
       "3  1003   78.0        93  12.0    6.5   4.63  Buckingham   67      0   \n",
       "4  1005  249.0        90  28.0    8.9   7.72  Buckingham   64      1   \n",
       "\n",
       "   time.ppn  systolicBP  diastolicBP        BMI  W/H_ratio  female  \n",
       "0     720.0       118.0         59.0  21.948062   0.763158       1  \n",
       "1     360.0       112.0         68.0  37.419231   0.958333       1  \n",
       "2     180.0       187.0         92.0  47.142128   0.859649       1  \n",
       "3     480.0       110.0         50.0  18.794464   0.868421       0  \n",
       "4     300.0       138.0         80.0  27.520673   1.073171       0  "
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67695f57",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "0ae9a646",
   "metadata": {},
   "source": [
    "**Visualising Data***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "7654a09e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "correlation_matrix = df.corr().round(3)\n",
    "plt.figure(figsize = (10,10))\n",
    "dataplot = sn.heatmap(correlation_matrix, cmap=\"YlGnBu\", annot=True,square = True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "ea66a19a",
   "metadata": {},
   "outputs": [],
   "source": [
    "diaSet = df[df['glyhb']>=7]\n",
    "NodiaSet = df[df['glyhb']<7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "baa1a6d5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZAAAAEICAYAAABxiqLiAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAA30klEQVR4nO3de3wU9bn48c+TEAoRihLQUjCJx0OtIiFKoFWsgihV1OP9gpGi9hi1WrUe6y2niseT2l+tYq0XSluUmhRtUdT20CpSRW1tNXi4KcdLbYIRlZsiNFhC8vz+mNm42czszm72Mps879drX8nOzs58dwjz7Pf2fEVVMcYYY5JVkOsCGGOMyU8WQIwxxqTEAogxxpiUWAAxxhiTEgsgxhhjUmIBxBhjTEoyFkBEZF8ReVZE1onIayJypbt9qIgsFZG33J97+bz/OBF5Q0TeFpHrM1VOY4wxqZFMzQMRkRHACFV9VUQGAyuAU4Dzga2q+gM3MOylqtfFvLcQeBM4FmgBXgFmqOrr8c45bNgwLS8vT/dHMcaYXmvFihWbVXV4Ku/tl+7CRKjq+8D77u/bRWQdMBI4GZjs7rYAeA64LubtE4G3VfUdABF52H1f3ABSXl5OY2Njmj6BMcb0fiLSnOp7s9IHIiLlwCHAX4F93OASCTJ7e7xlJPBu1PMWd5vXsWtEpFFEGjdt2pTWchtjjPGX8QAiIoOAR4GrVPWToG/z2ObZ1qaq81S1SlWrhg9PqRZmjDEmBRkNICJShBM8GlT1MXfzh27/SKSfZKPHW1uAfaOejwI2ZLKsxhhjkpOxPhAREeAXwDpVvTPqpSeBWcAP3J9PeLz9FWC0iOwHvAecA5ybqbIa01e0tbXR0tLCp59+muuimCwbMGAAo0aNoqioKG3HzFgAASYBM4E1IrLS3XYjTuD4tYh8E1gPnAkgIl8Efq6q01V1t4hcDjwFFALzVfW1DJbVmD6hpaWFwYMHU15ejvMdz/QFqsqWLVtoaWlhv/32S9txM9aEpaovqqqoaoWqVrqPJaq6RVWnqupo9+dWd/8Nqjo96v1LVPVLqrq/qtZlqpymj2logPJyKChwfjY05LpEWfXpp59SUlJiwaOPERFKSkrSXvPMZA3EmHBpaICaGmhtdZ43NzvPAaqrc1euLLPg0Tdl4t/dUpmYvqO29rPgEdHa6mw3xiTNAojpO9avT267yYjCwkIqKysZM2YM48aN484776SjowOAxsZGrrjiirjvf/DBB7n88suTOuf3v//9lMsbbfbs2RQXF7Nx42eDRwcNGpSWY0d77rnn+POf/9z5fO7cufzyl79M+3l6ygKI6TtKS5PbbjJi4MCBrFy5ktdee42lS5eyZMkSbrnlFgCqqqq4++67037OdAUQgGHDhnHHHXek7XheYgPIJZdcwje+8Y2MnjMVFkBM31FXB8XFXbcVFzvbjaeGNQ2U31VOwS0FlN9VTsOa9A462HvvvZk3bx733HMPqspzzz3HiSeeCMDLL7/M4YcfziGHHMLhhx/OG2+80fm+d999l+OOO44DDjigM/gA1NfXM3HiRCorK7n44otpb2/n+uuvZ+fOnVRWVlLt9nV57dfe3s7555/PwQcfzNixY5kzZ45nmS+88EIeeeQRtm7d2u01r+MC/OIXv+BLX/oSkydP5qKLLuqsQW3atInTTz+dCRMmMGHCBP70pz/R1NTE3LlzmTNnDpWVlbzwwgvMnj2bH/3oR6xbt46JEyd2nq+pqYmKigoAVqxYwVFHHcX48eP5+te/zvvvv9+Tf5pgVLXXPMaPH6/GxFVfr1pWpiri/Kyvz3WJsur1118PvG/96notritWZtP5KK4r1vrVPbtme+yxR7dte+65p37wwQf67LPP6gknnKCqqtu2bdO2tjZVVV26dKmedtppqqr6wAMP6Be+8AXdvHmztra26pgxY/SVV17R119/XU888UTdtWuXqqpeeumlumDBgm7n9NuvsbFRjznmmM79Pvroo27lvPnmm/X222/XW265RW+66aYux/Y77nvvvadlZWW6ZcsW3bVrlx5xxBF62WWXqarqjBkz9IUXXlBV1ebmZv3yl7/c5Tyx51VVHTdunP7tb39TVdUf/OAHeuutt+quXbv0sMMO040bN6qq6sMPP6wXXHBBt/J7/fsDjZriPddGYZm+pbq6T4246onaZbW0tnUddNDa1krtslqqx6b3GqpHVvBt27Yxa9Ys3nrrLUSEtra2zteOPfZYSkpKADjttNN48cUX6devHytWrGDChAkA7Ny5k7337p5qb9myZZ77nXTSSbzzzjt8+9vf5oQTTmDatGm+5b3iiiuorKzkP/7jPxIe9+WXX+aoo45i6NChAJx55pm8+eabADzzzDO8/vpnOWI/+eQTtm/fHvdanXXWWfz617/m+uuv55FHHuGRRx7hjTfeYO3atRx77LEAtLe3M2LEiLjHSQcLIMYYT+u3eQ8u8NueqnfeeYfCwkL23ntv1q1b17n9e9/7HlOmTGHx4sU0NTUxefLkztdih6SKCKrKrFmzuO222+KeL95+q1at4qmnnuLee+/l17/+NfPnz/c8xp577sm5557Lfffdl/C4ixcv9i1LR0cHL730EgMHDoxb5mhnn302Z555JqeddhoiwujRo1mzZg1jxozhpZdeCnycdLA+EGOMp9Ih3oML/LanYtOmTVxyySVcfvnl3YLCtm3bGDnSScL94IMPdnlt6dKlbN26lZ07d/L4448zadIkpk6dyqJFizpHSG3dupXmZidTeVFRUWcNxm+/zZs309HRwemnn86tt97Kq6++GrfsV199NT/96U/ZvXt33ONOnDiR5cuX89FHH7F7924effTRzmNMmzaNe+65p/P5ypUrARg8eLBvTWT//fensLCQW2+9lbPPPhuAAw44gE2bNnUGkLa2Nl57LfPJOyyAGGM81U2to7io66CD4qJi6qb2bNBBpEN7zJgxHHPMMUybNo2bb765237XXnstN9xwA5MmTersjI444ogjmDlzJpWVlZx++ulUVVVx0EEH8d///d9MmzaNiooKjj322M6O5JqaGioqKqiurvbd77333mPy5MlUVlZy/vnnJ6zJDBs2jFNPPZV//vOfAL7HHTlyJDfeeCNf+cpXOOaYYzjooIMYMmQIAHfffTeNjY1UVFRw0EEHMXfuXABOOukkFi9e3NmJHuvss8+mvr6es846C4D+/fuzaNEirrvuOsaNG0dlZWWXUVyZkrEVCXOhqqpKbUEpY/ytW7eOAw88MPD+DWsaqF1Wy/pt6ykdUkrd1Lq093/0BTt27GDQoEHs3r2bU089lQsvvJBTTz016+Xw+vcXkRWqWpXK8awPxBjjq3pstQWMNJg9ezbPPPMMn376KdOmTeOUU07JdZHSwgKIMcZk2I9+9KNcFyEjrA/EGGNMSiyAGGOMSYkFEGOMMSmxAGKMMSYlFkCMMVmV7+ncR44cSWVlJQcffDBPPvlk0se46aabeOaZZwC46667aI1ao2b69Ol8/PHHaSlrNtg8EGP6kGTngWTCoEGD2LFjBwAbN27k3HPPZdKkSV2y6sbz4IMP0tjY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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(NodiaSet['stab.glu'],NodiaSet['ratio'],color='green',label = \"Diabetes Negetive\")\n",
    "plt.scatter(diaSet['stab.glu'],diaSet['ratio'],color='red',label=\"Diabetes Positive\")\n",
    "plt.xlabel('Stablized Glucose')\n",
    "plt.ylabel('Cholesterol Ratio')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "addcb3d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(NodiaSet['stab.glu'],NodiaSet['BMI'],color='green',label = \"Diabetes Negetive\")\n",
    "plt.scatter(diaSet['stab.glu'],diaSet['BMI'],color='red',label=\"Diabetes Positive\")\n",
    "plt.xlabel('Stablized Glucose')\n",
    "plt.ylabel('BMI')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "87f9f3b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = ['ratio','Age','systolicBP','diastolicBP','BMI','W/H_ratio','stab.glu','frame','female']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71792b92",
   "metadata": {},
   "source": [
    "**Normalising the deseried features**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "732041ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfNormal = df\n",
    "for col in features:\n",
    "    dfNormal[col] = (df[col]-df[col].min())/(df[col].max()-df[col].min())\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "dc6e4ba0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>chol</th>\n",
       "      <th>stab.glu</th>\n",
       "      <th>hdl</th>\n",
       "      <th>ratio</th>\n",
       "      <th>glyhb</th>\n",
       "      <th>Location</th>\n",
       "      <th>Age</th>\n",
       "      <th>frame</th>\n",
       "      <th>time.ppn</th>\n",
       "      <th>systolicBP</th>\n",
       "      <th>diastolicBP</th>\n",
       "      <th>BMI</th>\n",
       "      <th>W/H_ratio</th>\n",
       "      <th>female</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>203.0</td>\n",
       "      <td>0.100890</td>\n",
       "      <td>56.0</td>\n",
       "      <td>0.117978</td>\n",
       "      <td>4.31</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>0.369863</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>720.0</td>\n",
       "      <td>0.17500</td>\n",
       "      <td>0.144737</td>\n",
       "      <td>0.151388</td>\n",
       "      <td>0.176427</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>165.0</td>\n",
       "      <td>0.145401</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.303371</td>\n",
       "      <td>4.44</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>0.136986</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>360.0</td>\n",
       "      <td>0.13750</td>\n",
       "      <td>0.263158</td>\n",
       "      <td>0.545386</td>\n",
       "      <td>0.599765</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>228.0</td>\n",
       "      <td>0.130564</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0.264045</td>\n",
       "      <td>4.64</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>0.534247</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>180.0</td>\n",
       "      <td>0.60625</td>\n",
       "      <td>0.578947</td>\n",
       "      <td>0.792995</td>\n",
       "      <td>0.385718</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>78.0</td>\n",
       "      <td>0.133531</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.280899</td>\n",
       "      <td>4.63</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>0.657534</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>480.0</td>\n",
       "      <td>0.12500</td>\n",
       "      <td>0.026316</td>\n",
       "      <td>0.071076</td>\n",
       "      <td>0.404744</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1005</td>\n",
       "      <td>249.0</td>\n",
       "      <td>0.124629</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0.415730</td>\n",
       "      <td>7.72</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>0.616438</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>300.0</td>\n",
       "      <td>0.30000</td>\n",
       "      <td>0.421053</td>\n",
       "      <td>0.293303</td>\n",
       "      <td>0.848849</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     id   chol  stab.glu   hdl     ratio  glyhb    Location       Age  \\\n",
       "0  1000  203.0  0.100890  56.0  0.117978   4.31  Buckingham  0.369863   \n",
       "1  1001  165.0  0.145401  24.0  0.303371   4.44  Buckingham  0.136986   \n",
       "2  1002  228.0  0.130564  37.0  0.264045   4.64  Buckingham  0.534247   \n",
       "3  1003   78.0  0.133531  12.0  0.280899   4.63  Buckingham  0.657534   \n",
       "4  1005  249.0  0.124629  28.0  0.415730   7.72  Buckingham  0.616438   \n",
       "\n",
       "      frame  time.ppn  systolicBP  diastolicBP       BMI  W/H_ratio  female  \n",
       "0  0.333333     720.0     0.17500     0.144737  0.151388   0.176427     1.0  \n",
       "1  0.000000     360.0     0.13750     0.263158  0.545386   0.599765     1.0  \n",
       "2  0.000000     180.0     0.60625     0.578947  0.792995   0.385718     1.0  \n",
       "3  0.000000     480.0     0.12500     0.026316  0.071076   0.404744     0.0  \n",
       "4  0.333333     300.0     0.30000     0.421053  0.293303   0.848849     0.0  "
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfNormal.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "4c05ef2d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>chol</th>\n",
       "      <th>stab.glu</th>\n",
       "      <th>hdl</th>\n",
       "      <th>ratio</th>\n",
       "      <th>glyhb</th>\n",
       "      <th>Location</th>\n",
       "      <th>Age</th>\n",
       "      <th>frame</th>\n",
       "      <th>time.ppn</th>\n",
       "      <th>systolicBP</th>\n",
       "      <th>diastolicBP</th>\n",
       "      <th>BMI</th>\n",
       "      <th>W/H_ratio</th>\n",
       "      <th>female</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>203.0</td>\n",
       "      <td>0.100890</td>\n",
       "      <td>56.0</td>\n",
       "      <td>0.117978</td>\n",
       "      <td>4.31</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>0.369863</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>720.0</td>\n",
       "      <td>0.17500</td>\n",
       "      <td>0.144737</td>\n",
       "      <td>0.151388</td>\n",
       "      <td>0.176427</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>165.0</td>\n",
       "      <td>0.145401</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.303371</td>\n",
       "      <td>4.44</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>0.136986</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>360.0</td>\n",
       "      <td>0.13750</td>\n",
       "      <td>0.263158</td>\n",
       "      <td>0.545386</td>\n",
       "      <td>0.599765</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>228.0</td>\n",
       "      <td>0.130564</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0.264045</td>\n",
       "      <td>4.64</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>0.534247</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>180.0</td>\n",
       "      <td>0.60625</td>\n",
       "      <td>0.578947</td>\n",
       "      <td>0.792995</td>\n",
       "      <td>0.385718</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>78.0</td>\n",
       "      <td>0.133531</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.280899</td>\n",
       "      <td>4.63</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>0.657534</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>480.0</td>\n",
       "      <td>0.12500</td>\n",
       "      <td>0.026316</td>\n",
       "      <td>0.071076</td>\n",
       "      <td>0.404744</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1005</td>\n",
       "      <td>249.0</td>\n",
       "      <td>0.124629</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0.415730</td>\n",
       "      <td>7.72</td>\n",
       "      <td>Buckingham</td>\n",
       "      <td>0.616438</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>300.0</td>\n",
       "      <td>0.30000</td>\n",
       "      <td>0.421053</td>\n",
       "      <td>0.293303</td>\n",
       "      <td>0.848849</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     id   chol  stab.glu   hdl     ratio  glyhb    Location       Age  \\\n",
       "0  1000  203.0  0.100890  56.0  0.117978   4.31  Buckingham  0.369863   \n",
       "1  1001  165.0  0.145401  24.0  0.303371   4.44  Buckingham  0.136986   \n",
       "2  1002  228.0  0.130564  37.0  0.264045   4.64  Buckingham  0.534247   \n",
       "3  1003   78.0  0.133531  12.0  0.280899   4.63  Buckingham  0.657534   \n",
       "4  1005  249.0  0.124629  28.0  0.415730   7.72  Buckingham  0.616438   \n",
       "\n",
       "      frame  time.ppn  systolicBP  diastolicBP       BMI  W/H_ratio  female  \n",
       "0  0.333333     720.0     0.17500     0.144737  0.151388   0.176427     1.0  \n",
       "1  0.000000     360.0     0.13750     0.263158  0.545386   0.599765     1.0  \n",
       "2  0.000000     180.0     0.60625     0.578947  0.792995   0.385718     1.0  \n",
       "3  0.000000     480.0     0.12500     0.026316  0.071076   0.404744     0.0  \n",
       "4  0.333333     300.0     0.30000     0.421053  0.293303   0.848849     0.0  "
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "meanRatio = dfNormal['ratio'].mean()\n",
    "meanAge = dfNormal['Age'].mean()\n",
    "meansystolicBP = dfNormal['systolicBP'].mean()\n",
    "meandiastolicBP = dfNormal['diastolicBP'].mean()\n",
    "meanglu = dfNormal['stab.glu'].mean()\n",
    "meanBMI = dfNormal['BMI'].mean()\n",
    "sdRatio = dfNormal['ratio'].std()\n",
    "sdAge = dfNormal['Age'].std()\n",
    "sdsystolicBP = dfNormal['systolicBP'].std()\n",
    "sddiastolicBP = dfNormal['diastolicBP'].std()\n",
    "sdBMI = dfNormal['BMI'].std()\n",
    "sdglu = dfNormal['stab.glu'].std()\n",
    "dfNormal.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a07421d5",
   "metadata": {},
   "source": [
    "**Removing outliers**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "e364d49d",
   "metadata": {},
   "outputs": [],
   "source": [
    "z = 2.97\n",
    "dfno_outlier = dfNormal[\n",
    "    (dfNormal.ratio>meanRatio-z*sdRatio) & (dfNormal.ratio<meanRatio+z*sdRatio) &\n",
    "    (dfNormal.Age>meanAge-z*sdAge) & (dfNormal.Age<meanAge+z*sdAge) &\n",
    "    (dfNormal.systolicBP>meansystolicBP-z*sdsystolicBP) & (dfNormal.systolicBP<meansystolicBP+z*sdsystolicBP) &\n",
    "    (dfNormal.diastolicBP>meandiastolicBP-z*sddiastolicBP) & (dfNormal.diastolicBP<meandiastolicBP+z*sddiastolicBP) &\n",
    "    (dfNormal.BMI>meanBMI-z*sdBMI) & (dfNormal.BMI<meanBMI+z*sdBMI)\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "9c0bc328",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_class0 = dfno_outlier[dfno_outlier['glyhb']<7]\n",
    "df_class1 = dfno_outlier[dfno_outlier['glyhb']>=7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "0efba651",
   "metadata": {},
   "outputs": [],
   "source": [
    "count_class0 = df_class0.shape[0]\n",
    "count_class1 = df_class1.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "815506e5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diabetes Negetive: 308\n",
      "Diabetes Positive: 57\n"
     ]
    }
   ],
   "source": [
    "print('Diabetes Negetive:',count_class0)\n",
    "print('Diabetes Positive:',count_class1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e11faaa0",
   "metadata": {},
   "source": [
    "*Our Dataset is unbalanced against the diabetes positive class. We will address it later*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "8d6580f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ratio</th>\n",
       "      <th>Age</th>\n",
       "      <th>systolicBP</th>\n",
       "      <th>diastolicBP</th>\n",
       "      <th>BMI</th>\n",
       "      <th>W/H_ratio</th>\n",
       "      <th>stab.glu</th>\n",
       "      <th>frame</th>\n",
       "      <th>female</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.117978</td>\n",
       "      <td>0.369863</td>\n",
       "      <td>0.17500</td>\n",
       "      <td>0.144737</td>\n",
       "      <td>0.151388</td>\n",
       "      <td>0.176427</td>\n",
       "      <td>0.100890</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.303371</td>\n",
       "      <td>0.136986</td>\n",
       "      <td>0.13750</td>\n",
       "      <td>0.263158</td>\n",
       "      <td>0.545386</td>\n",
       "      <td>0.599765</td>\n",
       "      <td>0.145401</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.264045</td>\n",
       "      <td>0.534247</td>\n",
       "      <td>0.60625</td>\n",
       "      <td>0.578947</td>\n",
       "      <td>0.792995</td>\n",
       "      <td>0.385718</td>\n",
       "      <td>0.130564</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.280899</td>\n",
       "      <td>0.657534</td>\n",
       "      <td>0.12500</td>\n",
       "      <td>0.026316</td>\n",
       "      <td>0.071076</td>\n",
       "      <td>0.404744</td>\n",
       "      <td>0.133531</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.415730</td>\n",
       "      <td>0.616438</td>\n",
       "      <td>0.30000</td>\n",
       "      <td>0.421053</td>\n",
       "      <td>0.293303</td>\n",
       "      <td>0.848849</td>\n",
       "      <td>0.124629</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      ratio       Age  systolicBP  diastolicBP       BMI  W/H_ratio  stab.glu  \\\n",
       "0  0.117978  0.369863     0.17500     0.144737  0.151388   0.176427  0.100890   \n",
       "1  0.303371  0.136986     0.13750     0.263158  0.545386   0.599765  0.145401   \n",
       "2  0.264045  0.534247     0.60625     0.578947  0.792995   0.385718  0.130564   \n",
       "3  0.280899  0.657534     0.12500     0.026316  0.071076   0.404744  0.133531   \n",
       "4  0.415730  0.616438     0.30000     0.421053  0.293303   0.848849  0.124629   \n",
       "\n",
       "      frame  female  \n",
       "0  0.333333     1.0  \n",
       "1  0.000000     1.0  \n",
       "2  0.000000     1.0  \n",
       "3  0.000000     0.0  \n",
       "4  0.333333     0.0  "
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = dfno_outlier[features]\n",
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "a1ecbd8f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(365, 9)"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e16f713",
   "metadata": {},
   "source": [
    "**Considering Glycosolated Hemoglobin level > 7 to be indicator of diabetes positive subject**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "acbbb3b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = dfno_outlier['glyhb']>=7\n",
    "y.replace({False:0,True:1},inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b30cbd10",
   "metadata": {},
   "source": [
    "**Spliting Data into training and testing phases**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "960f80bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=15, stratify=y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "0cb9666b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(255, 9)"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "d1fd445a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(110, 9)"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "7e823b00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    215\n",
       "1     40\n",
       "Name: glyhb, dtype: int64"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a83aa53",
   "metadata": {},
   "source": [
    "**Using SMOTE to oversample diabetes positive class in training data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "898fc310",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    215\n",
       "1    215\n",
       "Name: glyhb, dtype: int64"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from imblearn.over_sampling import SMOTE\n",
    "smote =SMOTE(sampling_strategy='minority')\n",
    "X_sm,y_sm = smote.fit_resample(X_train,y_train)\n",
    "y_sm.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "2e610f10",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix,classification_report\n",
    "from sklearn.model_selection import cross_val_score as cvs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "f229427c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def printScore(model,X_test,y_test):\n",
    "    y_predicted = model.predict(X_test)\n",
    "    print(classification_report(y_test,y_predicted))\n",
    "    cm = confusion_matrix(y_predicted,y_test)\n",
    "    plt.figure(figsize = (5,4))\n",
    "    sn.heatmap(cm,annot = True,fmt='d')\n",
    "    plt.xlabel('Predicted')\n",
    "    plt.ylabel('Truth')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45713f0e",
   "metadata": {},
   "source": [
    "### Logistic Regression Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "6189d0f4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.8876712328767123\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "modelLR = LogisticRegression()\n",
    "score = cvs(modelLR,X,y,cv=5)\n",
    "print('accuracy:',np.mean(score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "9233cf8c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      1.00      0.93        93\n",
      "           1       1.00      0.18      0.30        17\n",
      "\n",
      "    accuracy                           0.87       110\n",
      "   macro avg       0.93      0.59      0.61       110\n",
      "weighted avg       0.89      0.87      0.83       110\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "modelLR.fit(X_train,y_train)\n",
    "printScore(modelLR,X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "706b6f37",
   "metadata": {},
   "source": [
    "### Decision Tree Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "82007efc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.8931506849315068\n"
     ]
    }
   ],
   "source": [
    "from sklearn import tree\n",
    "modelTree = tree.DecisionTreeClassifier()\n",
    "score = cvs(modelTree,X,y,cv=5)\n",
    "print('accuracy:',np.mean(score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "d3d89eb1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.91      0.92        93\n",
      "           1       0.56      0.59      0.57        17\n",
      "\n",
      "    accuracy                           0.86       110\n",
      "   macro avg       0.74      0.75      0.75       110\n",
      "weighted avg       0.87      0.86      0.87       110\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "modelTree.fit(X_train,y_train)\n",
    "printScore(modelTree,X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9af7001e",
   "metadata": {},
   "source": [
    "### Support Vector Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3a0d5ca",
   "metadata": {},
   "source": [
    "#### Linear kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "fe3ef3cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.9260273972602739\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "modelSVClinear = SVC(C=5,kernel='linear')\n",
    "score = cvs(modelSVClinear,X,y,cv=5)\n",
    "print('accuracy:',np.mean(score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "3cee737a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      1.00      0.96        93\n",
      "           1       1.00      0.59      0.74        17\n",
      "\n",
      "    accuracy                           0.94       110\n",
      "   macro avg       0.97      0.79      0.85       110\n",
      "weighted avg       0.94      0.94      0.93       110\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "modelSVClinear.fit(X_train,y_train)\n",
    "printScore(modelSVClinear,X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50578b60",
   "metadata": {},
   "source": [
    "#### Polynomial Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "70dfbd6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.8493150684931507\n"
     ]
    }
   ],
   "source": [
    "modelSVCpoly = SVC(C=50,kernel = 'poly')\n",
    "score = cvs(modelSVCpoly,X,y,cv=5)\n",
    "print('accuracy:',np.mean(score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "36daa645",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.96      0.92        93\n",
      "           1       0.60      0.35      0.44        17\n",
      "\n",
      "    accuracy                           0.86       110\n",
      "   macro avg       0.74      0.65      0.68       110\n",
      "weighted avg       0.85      0.86      0.85       110\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "modelSVCpoly.fit(X_train,y_train)\n",
    "printScore(modelSVCpoly,X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c15e8681",
   "metadata": {},
   "source": [
    "#### RBF kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "e14fde1f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.9013698630136986\n"
     ]
    }
   ],
   "source": [
    "modelSVCrbf = SVC(C=10,kernel = 'rbf')\n",
    "score = cvs(modelSVCrbf,X,y,cv=5)\n",
    "print('accuracy:',np.mean(score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "d7f05259",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.99      0.95        93\n",
      "           1       0.90      0.53      0.67        17\n",
      "\n",
      "    accuracy                           0.92       110\n",
      "   macro avg       0.91      0.76      0.81       110\n",
      "weighted avg       0.92      0.92      0.91       110\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "modelSVCrbf.fit(X_train,y_train)\n",
    "printScore(modelSVCrbf,X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "910e43e1",
   "metadata": {},
   "source": [
    "#### Sigmoid kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "d37dc69b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.8246575342465754\n"
     ]
    }
   ],
   "source": [
    "modelSVCsigmoid = SVC(C=0.5,kernel = 'sigmoid')\n",
    "score = cvs(modelSVCsigmoid,X,y,cv=5)\n",
    "print('accuracy:',np.mean(score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "054621de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.99      0.91        93\n",
      "           1       0.00      0.00      0.00        17\n",
      "\n",
      "    accuracy                           0.84       110\n",
      "   macro avg       0.42      0.49      0.46       110\n",
      "weighted avg       0.71      0.84      0.77       110\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "modelSVCsigmoid.fit(X_train,y_train)\n",
    "printScore(modelSVCsigmoid,X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "309206c4",
   "metadata": {},
   "source": [
    "### Random Forest Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "5b8fe376",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.9205479452054794\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "modelRF = RandomForestClassifier(n_estimators = 50,criterion='gini')\n",
    "score = cvs(modelRF,X,y,cv=5)\n",
    "print('accuracy:',np.mean(score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "91e9744e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.99      0.95        93\n",
      "           1       0.89      0.47      0.62        17\n",
      "\n",
      "    accuracy                           0.91       110\n",
      "   macro avg       0.90      0.73      0.78       110\n",
      "weighted avg       0.91      0.91      0.90       110\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "modelRF.fit(X_train,y_train)\n",
    "printScore(modelRF,X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfb4c691",
   "metadata": {},
   "source": [
    "### Artificial Neural Network Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "87fc331a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow import keras \n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "d64a197d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.7132 - accuracy: 0.3843\n",
      "Epoch 2/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.6280 - accuracy: 0.8431\n",
      "Epoch 3/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.5631 - accuracy: 0.8431\n",
      "Epoch 4/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.5198 - accuracy: 0.8431\n",
      "Epoch 5/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.4832 - accuracy: 0.8431\n",
      "Epoch 6/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.4576 - accuracy: 0.8431\n",
      "Epoch 7/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.4439 - accuracy: 0.8431\n",
      "Epoch 8/100\n",
      "8/8 [==============================] - 0s 3ms/step - loss: 0.4336 - accuracy: 0.8431\n",
      "Epoch 9/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.4255 - accuracy: 0.8431\n",
      "Epoch 10/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.4186 - accuracy: 0.8431\n",
      "Epoch 11/100\n",
      "8/8 [==============================] - 0s 3ms/step - loss: 0.4102 - accuracy: 0.8431\n",
      "Epoch 12/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.4013 - accuracy: 0.8431\n",
      "Epoch 13/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.3927 - accuracy: 0.8431\n",
      "Epoch 14/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.3846 - accuracy: 0.8431\n",
      "Epoch 15/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.3749 - accuracy: 0.8431\n",
      "Epoch 16/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.3656 - accuracy: 0.8431\n",
      "Epoch 17/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.3562 - accuracy: 0.8431\n",
      "Epoch 18/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.3472 - accuracy: 0.8471\n",
      "Epoch 19/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.3377 - accuracy: 0.8627\n",
      "Epoch 20/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.3287 - accuracy: 0.8627\n",
      "Epoch 21/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.3208 - accuracy: 0.8667\n",
      "Epoch 22/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.3119 - accuracy: 0.8706\n",
      "Epoch 23/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.3055 - accuracy: 0.8863\n",
      "Epoch 24/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2999 - accuracy: 0.8902\n",
      "Epoch 25/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2932 - accuracy: 0.9098\n",
      "Epoch 26/100\n",
      "8/8 [==============================] - 0s 3ms/step - loss: 0.2866 - accuracy: 0.9137\n",
      "Epoch 27/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2815 - accuracy: 0.9176\n",
      "Epoch 28/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2761 - accuracy: 0.9176\n",
      "Epoch 29/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2721 - accuracy: 0.9176\n",
      "Epoch 30/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2681 - accuracy: 0.9216\n",
      "Epoch 31/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2654 - accuracy: 0.9255\n",
      "Epoch 32/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2639 - accuracy: 0.9216\n",
      "Epoch 33/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2588 - accuracy: 0.9216\n",
      "Epoch 34/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2561 - accuracy: 0.9255\n",
      "Epoch 35/100\n",
      "8/8 [==============================] - 0s 3ms/step - loss: 0.2538 - accuracy: 0.9255\n",
      "Epoch 36/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2563 - accuracy: 0.9255\n",
      "Epoch 37/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2560 - accuracy: 0.9216\n",
      "Epoch 38/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2485 - accuracy: 0.9216\n",
      "Epoch 39/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2456 - accuracy: 0.9294\n",
      "Epoch 40/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2456 - accuracy: 0.9294\n",
      "Epoch 41/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2417 - accuracy: 0.9333\n",
      "Epoch 42/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2457 - accuracy: 0.9216\n",
      "Epoch 43/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2441 - accuracy: 0.9255\n",
      "Epoch 44/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2418 - accuracy: 0.9294\n",
      "Epoch 45/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2370 - accuracy: 0.9333\n",
      "Epoch 46/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2371 - accuracy: 0.9216\n",
      "Epoch 47/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2358 - accuracy: 0.9294\n",
      "Epoch 48/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2339 - accuracy: 0.9294\n",
      "Epoch 49/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2327 - accuracy: 0.9294\n",
      "Epoch 50/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2319 - accuracy: 0.9216\n",
      "Epoch 51/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2318 - accuracy: 0.9216\n",
      "Epoch 52/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2304 - accuracy: 0.9294\n",
      "Epoch 53/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2320 - accuracy: 0.9255\n",
      "Epoch 54/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2285 - accuracy: 0.9255\n",
      "Epoch 55/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2277 - accuracy: 0.9294\n",
      "Epoch 56/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2274 - accuracy: 0.9294\n",
      "Epoch 57/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2260 - accuracy: 0.9255\n",
      "Epoch 58/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2305 - accuracy: 0.9255\n",
      "Epoch 59/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2238 - accuracy: 0.9294\n",
      "Epoch 60/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2245 - accuracy: 0.9294\n",
      "Epoch 61/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2223 - accuracy: 0.9333\n",
      "Epoch 62/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2216 - accuracy: 0.9294\n",
      "Epoch 63/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2221 - accuracy: 0.9333\n",
      "Epoch 64/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2204 - accuracy: 0.9333\n",
      "Epoch 65/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2202 - accuracy: 0.9255\n",
      "Epoch 66/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2197 - accuracy: 0.9294\n",
      "Epoch 67/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2192 - accuracy: 0.9294\n",
      "Epoch 68/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2203 - accuracy: 0.9294\n",
      "Epoch 69/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2176 - accuracy: 0.9255\n",
      "Epoch 70/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2167 - accuracy: 0.9294\n",
      "Epoch 71/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2162 - accuracy: 0.9333\n",
      "Epoch 72/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2161 - accuracy: 0.9294\n",
      "Epoch 73/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2151 - accuracy: 0.9255\n",
      "Epoch 74/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2137 - accuracy: 0.9333\n",
      "Epoch 75/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2151 - accuracy: 0.9333\n",
      "Epoch 76/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2151 - accuracy: 0.9294\n",
      "Epoch 77/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2129 - accuracy: 0.9333\n",
      "Epoch 78/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2125 - accuracy: 0.9294\n",
      "Epoch 79/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2124 - accuracy: 0.9333\n",
      "Epoch 80/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2135 - accuracy: 0.9333\n",
      "Epoch 81/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2090 - accuracy: 0.9333\n",
      "Epoch 82/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2115 - accuracy: 0.9294\n",
      "Epoch 83/100\n",
      "8/8 [==============================] - 0s 1ms/step - loss: 0.2085 - accuracy: 0.9333\n",
      "Epoch 84/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2088 - accuracy: 0.9333\n",
      "Epoch 85/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2083 - accuracy: 0.9294\n",
      "Epoch 86/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2107 - accuracy: 0.9333\n",
      "Epoch 87/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2082 - accuracy: 0.9294\n",
      "Epoch 88/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2069 - accuracy: 0.9294\n",
      "Epoch 89/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2065 - accuracy: 0.9333\n",
      "Epoch 90/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2050 - accuracy: 0.9333\n",
      "Epoch 91/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2046 - accuracy: 0.9294\n",
      "Epoch 92/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2043 - accuracy: 0.9294\n",
      "Epoch 93/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2052 - accuracy: 0.9333\n",
      "Epoch 94/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2030 - accuracy: 0.9294\n",
      "Epoch 95/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2024 - accuracy: 0.9294\n",
      "Epoch 96/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2021 - accuracy: 0.9294\n",
      "Epoch 97/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2020 - accuracy: 0.9333\n",
      "Epoch 98/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2012 - accuracy: 0.9333\n",
      "Epoch 99/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2008 - accuracy: 0.9294\n",
      "Epoch 100/100\n",
      "8/8 [==============================] - 0s 2ms/step - loss: 0.2004 - accuracy: 0.9294\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x1f736879940>"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modelNN = keras.Sequential([\n",
    "    keras.layers.Dense(100,input_shape=(X.shape[1],),activation='relu'),\n",
    "    keras.layers.Dense(10,activation='relu'),\n",
    "    keras.layers.Dense(1,activation='sigmoid')\n",
    "    \n",
    "])\n",
    "modelNN.compile(\n",
    "    optimizer = 'adam',\n",
    "    loss = 'binary_crossentropy',\n",
    "    metrics = ['accuracy']\n",
    ")\n",
    "modelNN.fit(X_train,y_train,epochs=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "253a4b83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4/4 [==============================] - 0s 1ms/step - loss: 0.1761 - accuracy: 0.9455\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.17612101137638092, 0.9454545378684998]"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modelNN.evaluate(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "404df86e",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_p = modelNN.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "57648ffb",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predicted = []\n",
    "for yi in y_p:\n",
    "    if yi>0.5:\n",
    "        y_predicted.append(1)\n",
    "    else:\n",
    "        y_predicted.append(0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "20ebcf18",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.99      0.97        93\n",
      "           1       0.92      0.71      0.80        17\n",
      "\n",
      "    accuracy                           0.95       110\n",
      "   macro avg       0.94      0.85      0.88       110\n",
      "weighted avg       0.94      0.95      0.94       110\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(24.0, 0.5, 'Truth')"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = tf.math.confusion_matrix(labels=y_test,predictions=y_predicted)\n",
    "print(classification_report(y_test,y_predicted))\n",
    "plt.figure(figsize = (5,4))\n",
    "sn.heatmap(cm, annot=True, fmt='d')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Truth')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
